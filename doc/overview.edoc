@author  Tony Rogvall <tony@rogvall.se>
@author  Malotte W Lönne <malotte@malotte.net>
@version 1.0
@title Tellstick control application
@doc A CANopen application that connects to a CANopen node and receives commands that can be interpreted and transfered to a tellstick device.

== General ==
The tellstick application enables to send remote control commands from a CANopen node, such as the SeaZone RC application for iPhone/iPod/iPad, via a tellstick device to your electrical equipment. I.e. you can use your phone to turn on the light etc.

tellstick has support for the following remote control protocols:
<ul>
<li>nexa</li>
<li>nexax</li>
<li>waveman</li>
<li>sartano</li>
<li>ikea</li>
<li>risingsun</li>
</ul>

For a mapping between these protocols and brands see: <a href="https://github.com/malotte/tellstick/wiki/Protocol---Brand-Map" target="_blank">Protocol - Brand Map</a>

== Installation ==
Installation is described in the tellstick README at github: 
<a href="https://github.com/malotte/tellstick" target="_blank">README</a>

== User's Guide ==
User Guides can be found on the tellstick wiki at github: <br/>
<a href="https://github.com/malotte/tellstick/wiki/howto_configure_tellstick" target="_blank">How to configure tellstick</a><br/>
<a href="https://github.com/malotte/tellstick/wiki/howto_install_as_service" target="_blank">How to install tellstick as a service</a>
 
== Implementation ==
The tellstick application consists of:
<ul>
<li>tellstick - Starts the tellstick application.</li>
<li>tellstick_sup - Supervisor starting the tellstick server.</li>
<li>tellstick_srv - Server receiving CANopen messages interpreted by the pds/canopen application.</li>
<li>tellstick_drv  - Server sending remote control commnds to the tellstick device. </li>
</ul>

The application reads its configuration from a file, if none specified "tellstick.conf", located in the applications priv-directory, is used as default.

The application uses the canopen application for getting access to the CANopen network.
The application attaches to a CANopen node and adds subscriptions for the MPDO messages it wants to receive.

These are:
<ul>
<li> ?MSG_POWER - Signals power on of another CANopen node. </li>
<li> ?MSG_POWER_OFF - Signals power off of another CANopen node.</li>
<li> ?MSG_DIGITAL - Control signal for a digital device.</li>
<li> ?MSG_ANALOG - Control signal for an analog device.</li>
<li> ?MSG_ENCODER - Control signal for an encoded device (not supported yet).</li>
</ul>

For translation of the erlang macros to CANopen numeric values see co_app.hrl.

When receiving ?MSG_POWER_ON and ?MSG_POWER_OFF the application checks 
whether its configuration contains any items belonging to that node.
If that is the case the appropriate ?MSG_OUTPUT_ADD/DEL and ?MSG_OUTPUT_ACTIVE
messages are sent to the originting CANopen node.

When receiving ?MSG_ANALOG/?MSG_DIGITAL the indicated items are activated/deactivated/adjusted as requested. This is done by sending a command using the correct protocol to the tellstick device. A ?MSG_OUTPUT_ACTIVE is sent as a reply to the originating CANopen node. 

For testing purposes it is possible to run tellstick in simulated mode, setting the device option to simulated. In this mode output is written on standard out instead of sent to the device.

See also the documentation for canopen (see {@link canopen}).

@end



